// Generated by gencpp from file braccio_controller/coords.msg
// DO NOT EDIT!


#ifndef BRACCIO_CONTROLLER_MESSAGE_COORDS_H
#define BRACCIO_CONTROLLER_MESSAGE_COORDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace braccio_controller
{
template <class ContainerAllocator>
struct coords_
{
  typedef coords_<ContainerAllocator> Type;

  coords_()
    : x(0)
    , y(0)
    , z(0)
    , angle(0)
    , wrist(0)
    , real(false)
    , gripper(0)  {
    }
  coords_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , z(0)
    , angle(0)
    , wrist(0)
    , real(false)
    , gripper(0)  {
  (void)_alloc;
    }



   typedef int16_t _x_type;
  _x_type x;

   typedef int16_t _y_type;
  _y_type y;

   typedef int16_t _z_type;
  _z_type z;

   typedef int8_t _angle_type;
  _angle_type angle;

   typedef int8_t _wrist_type;
  _wrist_type wrist;

   typedef uint8_t _real_type;
  _real_type real;

   typedef uint8_t _gripper_type;
  _gripper_type gripper;





  typedef boost::shared_ptr< ::braccio_controller::coords_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::braccio_controller::coords_<ContainerAllocator> const> ConstPtr;

}; // struct coords_

typedef ::braccio_controller::coords_<std::allocator<void> > coords;

typedef boost::shared_ptr< ::braccio_controller::coords > coordsPtr;
typedef boost::shared_ptr< ::braccio_controller::coords const> coordsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::braccio_controller::coords_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::braccio_controller::coords_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::braccio_controller::coords_<ContainerAllocator1> & lhs, const ::braccio_controller::coords_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.angle == rhs.angle &&
    lhs.wrist == rhs.wrist &&
    lhs.real == rhs.real &&
    lhs.gripper == rhs.gripper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::braccio_controller::coords_<ContainerAllocator1> & lhs, const ::braccio_controller::coords_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace braccio_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::braccio_controller::coords_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::braccio_controller::coords_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::braccio_controller::coords_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::braccio_controller::coords_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::braccio_controller::coords_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::braccio_controller::coords_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::braccio_controller::coords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "865536847ef9cce2f44ef34a4baed036";
  }

  static const char* value(const ::braccio_controller::coords_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x865536847ef9cce2ULL;
  static const uint64_t static_value2 = 0xf44ef34a4baed036ULL;
};

template<class ContainerAllocator>
struct DataType< ::braccio_controller::coords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "braccio_controller/coords";
  }

  static const char* value(const ::braccio_controller::coords_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::braccio_controller::coords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 x\n"
"int16 y\n"
"int16 z\n"
"int8 angle\n"
"int8 wrist\n"
"bool real\n"
"uint8 gripper\n"
;
  }

  static const char* value(const ::braccio_controller::coords_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::braccio_controller::coords_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.angle);
      stream.next(m.wrist);
      stream.next(m.real);
      stream.next(m.gripper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct coords_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::braccio_controller::coords_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::braccio_controller::coords_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.z);
    s << indent << "angle: ";
    Printer<int8_t>::stream(s, indent + "  ", v.angle);
    s << indent << "wrist: ";
    Printer<int8_t>::stream(s, indent + "  ", v.wrist);
    s << indent << "real: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.real);
    s << indent << "gripper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRACCIO_CONTROLLER_MESSAGE_COORDS_H
